=======================================================
Namespace:  Quota, LimitRange
-------------------------------------------------------

namespace:
1) quota, LimitRange는 


=======================================================
POD:  init container
-------------------------------------------------------
-개념:
  앱컨터이너 실행 전ㅔ 미리 동작시킬 컨테이너
  본 컨테이너가 실행되기 전ㅔ 사ㄴ 작업이 필요한 경우 사용
  초기화 컨테이너가 모두 실행된 후에 앱 컨테이너를 실행
  https://kubernetes.io/ko/docs/concepts/workloads/pods/init-containers/


nano init-container-myapp-pod.yaml
---
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done"]
---

nano init-container-myservice.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9376
---

nano init-container-mydb.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: mydb
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9377
---

root@pod641:~# kubectl get pods  -o wide --watch
NAME                                               READY   STATUS      RESTARTS   AGE   IP              NODE     NOMINATED NODE   READINESS GATES
myapp-pod                                          0/1     Pending     0          0s    <none>          <none>   <none>           <none>
myapp-pod                                          0/1     Pending     0          0s    <none>          pod641   <none>           <none>
myapp-pod                                          0/1     Init:0/2    0          0s    <none>          pod641   <none>           <none>
myapp-pod                                          0/1     Init:0/2    0          1s    <none>          pod641   <none>           <none>
myapp-pod                                          0/1     Init:0/2    0          6s    172.28.17.115   pod641   <none>           <none>
myapp-pod                                          0/1     Init:1/2    0          44s   172.28.17.115   pod641   <none>           <none>
myapp-pod                                          0/1     Init:1/2    0          45s   172.28.17.115   pod641   <none>           <none>
myapp-pod                                          0/1     PodInitializing   0          76s   172.28.17.115   pod641   <none>           <none>
myapp-pod                                          1/1     Running           0          77s   172.28.17.115   pod641   <none>           <none>

kubectl delete  -f init-container-mydb.yaml
kubectl delete -f init-container-myservice.yaml
kubectl delete -f init-container-myapp-pod.yaml



=======================================================
POD:  infra container
-------------------------------------------------------
-개념:
  .POD가 만들어 질때 내부적으로 숨겨진 pause container가 하나씩 만들어 진다.
  .POD가 실행될 때 POD의 인프라를 만들어 주는 역할


kubectl run nginxweb --image=nginx:latest --port=80 

docker container ls

root@pod641:~/KubernetesLearning# docker ps | grep nginxweb
bc751da6eff5        nginx                                                    "/docker-entrypoint.…"   26 seconds ago      Up 26 seconds                                                                      k8s_nginxweb_nginxweb_default_e2d9f47d-5faf-44d8-a826-a247d8d9f366_0
1da7cdf74670        k8s.gcr.io/pause:3.2                                     "/pause"                 31 seconds ago      Up 30 seconds                                                                      k8s_POD_nginxweb_default_e2d9f47d-5faf-44d8-a826-a247d8d9f366_0
root@pod641:~/KubernetesLearning#


=======================================================
POD:   static pod
-------------------------------------------------------
-개념: 
  .POD의 생성은 API-Server로 들어온 요청을 Scheduler가 etcd DB를 읽어서 만들어질 node를 결정해 주면 Controler-Manager가 그 노드의 kubelet daemon과 통신해서 만들어 주는 절차를 거치는데
  .static pod는 각각의 노드에 kubelet daemon이 관리하는 특별한 디렉토리에 .yaml을 넣어주면 kubelet이 알아서 자동적으로 수행해 주는 pod를 말함
  ..yaml 파일을 지우면 알아서 지워짐
  .즉, kubelet daemon에 의해 동작하는 pod를 static pod라 함.
  .API 서버의 도움없이 특정 노드에 있는 kubelet 데몬에 의해 직접 관리
  ./etc/kubernetes/mainfest/ 디렉토리에 K8s yaml파일을 저장 시 적용됨


  nano /var/lib/kubelet/config.yaml
  ...
  staticPodPath: /etc/kubernetes/manifests
  ...

  디렉토리 수정시 kubelet데몬 재-실행
  #systemctl restart kubelet


-kubelet daemon
root@pod641:/var/lib/kubelet# ll
total 44
drwx------  8 root root 4096 Apr 11 07:54 ./
drwxr-xr-x 65 root root 4096 Apr 26 11:59 ../
-rw-r--r--  1 root root  921 Apr 11 07:54 config.yaml
-rw-------  1 root root   62 Apr 11 07:54 cpu_manager_state
drwxr-xr-x  2 root root 4096 Apr 11 07:54 device-plugins/
-rw-r--r--  1 root root   93 Apr 11 07:54 kubeadm-flags.env
drwxr-xr-x  2 root root 4096 Apr 11 07:54 pki/
drwxr-x---  2 root root 4096 Apr 11 07:54 plugins/
drwxr-x---  2 root root 4096 Apr 11 07:54 plugins_registry/
drwxr-x---  2 root root 4096 Apr 11 07:54 pod-resources/
drwxr-x--- 22 root root 4096 Jun 14 08:08 pods/
root@pod641:/var/lib/kubelet#


cat /var/lib/kubelet/config.yaml
...
staticPodPath: /etc/kubernetes/manifests
...


-/etc/kubernetes/manifests

root@pod641:/etc/kubernetes/manifests# ll
total 24
drwx------ 2 root root 4096 Apr 11 07:54 ./
drwxr-xr-x 4 root root 4096 Apr 11 07:54 ../
-rw------- 1 root root 2183 Apr 11 07:54 etcd.yaml
-rw------- 1 root root 3818 Apr 11 07:54 kube-apiserver.yaml
-rw------- 1 root root 3315 Apr 11 07:54 kube-controller-manager.yaml
-rw------- 1 root root 1385 Apr 11 07:54 kube-scheduler.yaml
root@pod641:/etc/kubernetes/manifests#






5) Pod에 resource 할당하기
6) 환경변수를 이용해 컨터이너에게 데이터 전달하기
7) pod구성 패턴의 종류

