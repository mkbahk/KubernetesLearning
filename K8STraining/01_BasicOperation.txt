
=======================================================
bash-completion
-------------------------------------------------------
apt-get install bash-completion -y

//현재 사용자에게만 적용
echo 'source <(kubectl completion bash)' >>~/.bashrc
echo 'source <(kubeadm completion bash)' >>~/.bashrc

ssh disconnect & reconnect

//시스템 전체에 적용
kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl > /dev/null
kubeadm completion bash | sudo tee /etc/bash_completion.d/kubeadm > /dev/null

//ssh disconnect & reconnect


kubeadm version
kubelet --version
kubectl version

kubectl cluster-info

root@pod641:~# kubectl cluster-info
Kubernetes control plane is running at https://218.145.56.75:6443
KubeDNS is running at https://218.145.56.75:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
Metrics-server is running at https://218.145.56.75:6443/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
root@pod641:~#


=======================================================
K8s Commands 기본 수행 구조
-------------------------------------------------------
kubectl --help
kubectl command --help
kubectl run <자원이름> <옵션>
#kubectl create -f file_name.yaml
kubectl create -f file_name.yaml

kubectl get <자원이름> <객체이름>
kebectl edit <자원이름> <객체이름>
kubectl describe <자원이름> <객체이름>

kubectl delete <자원이름> <객체이름>

kubectl api-resources

=======================================================
K8s 기본 Commands 수행 및 기초작업 절차
-------------------------------------------------------
kubectl --help
kubectl logs --help

kubectl get nodes
kubectl get nodes -o wide
kubectl get nodes -o json
kubectl get nodes -o yaml

root@pod641:~# kubectl get nodes
NAME     STATUS   ROLES                  AGE   VERSION
pod641   Ready    control-plane,master   61d   v1.20.0
pod642   Ready    <none>                 61d   v1.20.0
root@pod641:~# kubectl describe node pod641

//시작하자, 오직 하나의 pod에 하나의 컨테이너 가진 pod만들기
kubectl run nginxweb --image=nginx:1.14 --port 80

root@pod641:~# kubectl get pods -o wide
NAME                                               READY   STATUS      RESTARTS   AGE     IP              NODE     NOMINATED NODE   READINESS GATES
nginxweb                                           1/1     Running     0          3m29s   172.28.17.94    pod641   <none>           <none>

kubectl logs  nginxweb
kubectl describe pod nginxweb

ping 172.28.17.94
curl http://172.28.17.94:80/
curl http://공인ip:80/  //않되는 것이 정상


kubectl create deployment multiweb --image=httpd:latest --replicas=3
kubectl get deployments.apps -o wide

kubectl get deployments.apps
root@pod641:~# kubectl get deployments.apps
NAME                              READY   UP-TO-DATE   AVAILABLE   AGE
multiweb                          3/3     3            3           2m30s

kubectl get pod -o wide
root@pod641:~# kubectl get pod -o wide
NAME                                               READY   STATUS      RESTARTS   AGE     IP               NODE     NOMINATED NODE   READINESS GATES
multiweb-dc7ddc4f8-27w89                           1/1     Running     0          2m53s   172.28.17.95     pod641   <none>           <none>
multiweb-dc7ddc4f8-p7j7c                           1/1     Running     0          2m53s   172.28.235.249   pod642   <none>           <none>
multiweb-dc7ddc4f8-wtsp8                           1/1     Running     0          2m53s   172.28.235.250   pod642   <none>           <none>

kubectl get deployments.apps multiweb -o yaml

//Container 내부 명령어 수행하기
kubectl get pods

root@pod641:~# kubectl get pods
NAME                                               READY   STATUS      RESTARTS   AGE
nginxweb                                           1/1     Running     0          11h

kubectl exec nginxweb -it -- /bin/bash

kubectl logs nginxweb

kubectl describe pod nginxweb   //docker inspect를 대신하는 명령
kubectl port-forward nginxweb 8380:80  //개발환경에서 테스팅용도만, 실제는 Load Balancer사용

root@pod641:~# kubectl port-forward nginxweb 8380:80
Forwarding from 127.0.0.1:8380 -> 80
Forwarding from [::1]:8380 -> 80

Handling connection for 8380
Ctrl+c 


root@pod641:~# kubectl get pods
NAME                                               READY   STATUS      RESTARTS   AGE
multiweb-dc7ddc4f8-27w89                           1/1     Running     0          11h
multiweb-dc7ddc4f8-p7j7c                           1/1     Running     0          11h
multiweb-dc7ddc4f8-wtsp8                           1/1     Running     0          11h


kubectl edit deployments.apps multiweb
...
spec:
  progressDeadlineSeconds: 600
  replicas: 3 -> 6  //vi editor임. "i" 3 -> 6로 변경
...
Esc
Esc

:wq!

root@pod641:~# kubectl get deployments.apps
NAME                              READY   UP-TO-DATE   AVAILABLE   AGE
multiweb                          6/6     6            6           11h


//수행명령을 .YAML 파일로 만들기
kubectl run nginxweb --image=nginx:latest --port 80 --dry-run
kubectl run nginxweb --image=nginx:latest --port 80 --dry-run -o yaml
kubectl run nginxweb --image=nginx:latest --port 80 --dry-run -o yaml > nginxweb-k8s-run-mkbahk-20220617.yaml

cat nginxweb-k8s-run-mkbahk-20220617.yaml

root@pod641:~# cat nginxweb-k8s-run-mkbahk-20220617.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginxweb
  name: nginxweb
spec:
  containers:
  - image: nginx:latest
    name: nginxweb
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

kubectl apply -f nginxweb-k8s-run-mkbahk-20220617.yaml

// 이제부터는 왠만한 모든 실행은 .YAML로 합니다. 
// github나 dockerhub처럼 이 .YAML들만 전문적으로 저장하고 있는 장소가 
// helm repogitory: https://artifacthub.io/ 입니다.

kubectl apply -f nginxweb-k8s-run-mkbahk-20220617.yaml

root@pod641:~# kubectl apply -f nginxweb-k8s-run-mkbahk-20220617.yaml
pod/nginxweb created
root@pod641:~# kubectl get pods
NAME                                               READY   STATUS      RESTARTS   AGE
nginxweb                                           1/1     Running     0          11s

kubectl delete -f nginxweb-k8s-run-mkbahk-20220617.yaml

//git에 .YAML을 올려 놓고 직접 다운한 후 기동가능
kubectl apply -f https://raw.githubusercontent.com/mkbahk/KubernetesLearning/main/K8STraining/nginxweb-k8s-run-mkbahk-20220617.yaml

kubectl delete -f https://raw.githubusercontent.com/mkbahk/KubernetesLearning/main/K8STraining/nginxweb-k8s-run-mkbahk-20220617.yaml


// https://artifacthub.io/ 에서 nginx찻아서 수행하는 방법
// nginx-ingress 찾으세요.

helm repo add nginx-stable https://helm.nginx.com/stable
helm repo update

helm install nginxingweb nginx-stable/nginx-ingress

helm list

root@pod641:~# helm list
NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION
nginxingweb     default         1               2022-06-12 11:19:42.205431442 +0900 KST deployed        nginx-ingress-0.13.2    2.2.2

kubectl get pods

root@pod641:~# kubectl get pods
NAME                                               READY   STATUS      RESTARTS   AGE
nginxingweb-nginx-ingress-69f99d89c8-556ts         1/1     Running     0          24s

helm uninstall nginxingweb

root@pod641:~# helm uninstall nginxingweb
release "nginxingweb" uninstalled

//이제 부터는 k8s상에서 응용프로그램 배포는 .YAML로 합니다.
//확인은 Kubernetes dashboard

=======================================================
K8s NAMESPACE: 가상자원의 집합 및 구별 ->자원할당 통제
-------------------------------------------------------
-가상자원: CPU, MEMORY, NETWORK(1G, 10G, 100G, ETHERNET, INFINBAND,...), STORAGE(1G, 10G, 100G), GPU/IPU/FPGA,...

kubectl create namespace devteam
kubectl get namespaces

kubectl create namespace devteam --dry-run=client -o yaml 
root@pod641:~# kubectl create namespace devteam --dry-run=client -o yaml
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: devteam
spec: {}
status: {}
root@pod641:~#

kubectl create namespace devteam --dry-run=client -o yaml > namespace-devteam.yaml

kubectl apply -f namespace-devteam.yaml
kubectl delete -f namespace-devteam.yaml

kubectl apply -f namespace-devteam.yaml

kubectl run nginxweb --image=nginx:latest --port 80 --namespace devteam

root@pod641:~# kubectl run nginxweb --image=nginx:latest --port 80 --namespace devteam --dry-run=client -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginxweb
  name: nginxweb
  namespace: devteam
spec:
  containers:
  - image: nginx:latest
    name: nginxweb
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
root@pod641:~#




kubectl get pods
kubectl get pods --all-namespaces
kubectl get pods -n devteam

kubectl delete pod nginxingweb -n devteam

kubectl delete namespace devteam

kubectl describe namespaces devteam


//Namespace를 만들 후에 pod까지 만들겠다고 두 YAML파일을 Merge하는 법
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: devteam
spec: {}
status: {}
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginxweb
  name: nginxweb
  namespace: devteam
spec:
  containers:
  - image: nginx:latest
    name: nginxweb
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
---

kubectl apply -f create_ns_andthen_pod.yaml
kubectl delete -f create_ns_andthen_pod.yaml


root@pod641:~# kubectl describe namespaces devteam
Name:         devteam
Labels:       <none>
Annotations:  <none>
Status:       Active

No resource quota.

No LimitRange resource.
//quota, LimitRange는 Advanced Topic에서



=======================================================
K8s YAML Template 
-------------------------------------------------------
-K8s는 CLI, .YAML, .JSON형식으로 기능을 API에게 요청할 수 있다.
-사람이 쉽게 읽을 수 있는 데이타 직렬화 양식
-기본문법:
  .구조화된 데이터를 표현하기 위한 데이타 포멧
  .Python처럼 들여쓰기로 데이타 계층을 표현하기
  .들여쓰기를 할 때는 TAB이 아닌 Space Bar를 사용해야 함
  .가독성이 좋아 컴퓨터 설정 파일에 적합한 형식
  .Scala문법: ':'을 기준으로 Key:Value를 설정
  .배열문법: '-'문자로 여러 개를 나열
  .공식 사이느: http://yaml.org/

=======================================================
K8s API Version
-------------------------------------------------------
-alpha -> beta -> stable
-Kubernetes Oject 정의 시 apiVersion이 필요
-Kubernetes가 update하는 API가 있으면 새로운 API가 생성 됨
-API Object 종류 및 버젼
  .Deployment             apps/v2
  .Pod                    v1
  .ReplicaSet             apps/v1
  .ReplicationController  v1
  .services               v1
  .PersistentVolume       v1

//Resource들의 API Version을 확인하는 명령
kubectl explain pod

=======================================================
K8s Pod with Single and Multi Container
-------------------------------------------------------
-개념: 
  .하나 또는 여러개의 컨테이너를 포함하고 있는 공간으로 IP_Address가 할당되어 TCP/IP를 통해 제어가 가능한 형태
  .Docker Host가 하나의 VM형태로 바뀐 것과 비슷함
  .POD안의 컨터이너들의 통신, 그리고 POD간, POD와 인터넷간의 통신방법들이 K8s에서 각종 기능으로 제공
  .하나의 POD는 IP_Address가, POD안의 컨테이너들은 TCP/UDP PORT로 구별됨
  .컨테이너를 표현하는 K8s API의 최소단위

---
apiVersion: v1
kind: Pod
metadata:
  name: multi-nginx-nodejs-pod
spec:
  containers:
  - name: nginx80container
    image: nginx:latest
    ports:
    - containerPort: 80
      protocol: TCP
  - name: hellonodejs7777container
    image: mkbahk/hellonodejs:1.0
    ports:
    - containerPort: 7777
      protocol: TCP
---

kubectl exec -it  multi-nginx-nodejs-pod -c hellonodejs7777container -- /bin/bash
kubectl logs multl-nginx-nodsjs-pod -c nginx80container



